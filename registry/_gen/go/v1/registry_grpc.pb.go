// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: v1/registry.proto

package registryv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RegistryServiceClient is the client API for RegistryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistryServiceClient interface {
	AddSbom(ctx context.Context, in *AddSbomRequest, opts ...grpc.CallOption) (*AddSbomResponse, error)
	GetSbom(ctx context.Context, in *GetSbomRequest, opts ...grpc.CallOption) (*GetSbomResponse, error)
	GetSbomList(ctx context.Context, in *GetSbomListRequest, opts ...grpc.CallOption) (RegistryService_GetSbomListClient, error)
}

type registryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistryServiceClient(cc grpc.ClientConnInterface) RegistryServiceClient {
	return &registryServiceClient{cc}
}

func (c *registryServiceClient) AddSbom(ctx context.Context, in *AddSbomRequest, opts ...grpc.CallOption) (*AddSbomResponse, error) {
	out := new(AddSbomResponse)
	err := c.cc.Invoke(ctx, "/registry.v1.RegistryService/AddSbom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) GetSbom(ctx context.Context, in *GetSbomRequest, opts ...grpc.CallOption) (*GetSbomResponse, error) {
	out := new(GetSbomResponse)
	err := c.cc.Invoke(ctx, "/registry.v1.RegistryService/GetSbom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) GetSbomList(ctx context.Context, in *GetSbomListRequest, opts ...grpc.CallOption) (RegistryService_GetSbomListClient, error) {
	stream, err := c.cc.NewStream(ctx, &RegistryService_ServiceDesc.Streams[0], "/registry.v1.RegistryService/GetSbomList", opts...)
	if err != nil {
		return nil, err
	}
	x := &registryServiceGetSbomListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RegistryService_GetSbomListClient interface {
	Recv() (*GetSbomListResponse, error)
	grpc.ClientStream
}

type registryServiceGetSbomListClient struct {
	grpc.ClientStream
}

func (x *registryServiceGetSbomListClient) Recv() (*GetSbomListResponse, error) {
	m := new(GetSbomListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RegistryServiceServer is the server API for RegistryService service.
// All implementations should embed UnimplementedRegistryServiceServer
// for forward compatibility
type RegistryServiceServer interface {
	AddSbom(context.Context, *AddSbomRequest) (*AddSbomResponse, error)
	GetSbom(context.Context, *GetSbomRequest) (*GetSbomResponse, error)
	GetSbomList(*GetSbomListRequest, RegistryService_GetSbomListServer) error
}

// UnimplementedRegistryServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRegistryServiceServer struct {
}

func (UnimplementedRegistryServiceServer) AddSbom(context.Context, *AddSbomRequest) (*AddSbomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSbom not implemented")
}
func (UnimplementedRegistryServiceServer) GetSbom(context.Context, *GetSbomRequest) (*GetSbomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSbom not implemented")
}
func (UnimplementedRegistryServiceServer) GetSbomList(*GetSbomListRequest, RegistryService_GetSbomListServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSbomList not implemented")
}

// UnsafeRegistryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistryServiceServer will
// result in compilation errors.
type UnsafeRegistryServiceServer interface {
	mustEmbedUnimplementedRegistryServiceServer()
}

func RegisterRegistryServiceServer(s grpc.ServiceRegistrar, srv RegistryServiceServer) {
	s.RegisterService(&RegistryService_ServiceDesc, srv)
}

func _RegistryService_AddSbom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSbomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).AddSbom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.v1.RegistryService/AddSbom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).AddSbom(ctx, req.(*AddSbomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_GetSbom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSbomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).GetSbom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.v1.RegistryService/GetSbom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).GetSbom(ctx, req.(*GetSbomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_GetSbomList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSbomListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RegistryServiceServer).GetSbomList(m, &registryServiceGetSbomListServer{stream})
}

type RegistryService_GetSbomListServer interface {
	Send(*GetSbomListResponse) error
	grpc.ServerStream
}

type registryServiceGetSbomListServer struct {
	grpc.ServerStream
}

func (x *registryServiceGetSbomListServer) Send(m *GetSbomListResponse) error {
	return x.ServerStream.SendMsg(m)
}

// RegistryService_ServiceDesc is the grpc.ServiceDesc for RegistryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegistryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "registry.v1.RegistryService",
	HandlerType: (*RegistryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSbom",
			Handler:    _RegistryService_AddSbom_Handler,
		},
		{
			MethodName: "GetSbom",
			Handler:    _RegistryService_GetSbom_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSbomList",
			Handler:       _RegistryService_GetSbomList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/registry.proto",
}
