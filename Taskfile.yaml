version: "3"
includes: {}
env:
  GOOS: "{{OS}}"
tasks:
  bootstrap:
    dir: "."
    cmds:
      - cmd: go install github.com/securego/gosec/v2/cmd/gosec@latest
      - cmd: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - cmd: go install github.com/spf13/cobra-cli@latest
      - cmd: go install github.com/kyleconroy/sqlc/cmd/sqlc@latest
      - cmd: go install github.com/bufbuild/buf/cmd/buf@latest
      - cmd: go install github.com/golang/protobuf/protoc-gen-go@latest
      - cmd: go install github.com/fullstorydev/grpcurl/cmd/grpcurl@latest
      - cmd: go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest
      - cmd: go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@latest
      - cmd: go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@latest

  sqlc:
    cmds:
      - task: sqlc-scanner-{{OS}}

  sqlc-scanner-windows:
    dir: "scanner"
    cmds:
      - cmd: docker run --rm -v "${PWD}:/src" -w /src kjconroy/sqlc generate

  sqlc-scanner-darwin:
    dir: "scanner"
    cmds:
      - cmd: sqlc generate

  pb:
    dir: "."
    cmds:
      - task: pb-clean-{{OS}}
      - task: pb-update-scanner
      - task: pb-update-registry
      - task: pb-lint-scanner
      - task: pb-lint-registry
      - task: pb-gen-scanner
      - task: pb-gen-registry

  pb-clean-windows:
    cmds:
      - task: rmdir-windows
        vars: { DIR_PATH: '.\scanner\_gen\go' }
      - task: rmdir-windows
        vars: { DIR_PATH: '.\registry\_gen\go' }
      - task: rmdir-windows
        vars: { DIR_PATH: '.\cli\_gen\go' }
      - task: rmdir-windows
        vars: { DIR_PATH: '.\scanner\_gen\swagger' }
      - task: rmdir-windows
        vars: { DIR_PATH: '.\registry\_gen\swagger' }

  pb-clean-darwin:
    cmds:
      - cmd: rm -rf ./cli/_gen
        ignore_error: true
      - cmd: rm -rf ./registry/_gen
        ignore_error: true
      - cmd: rm -rf ./scanner/_gen
        ignore_error: true

  pb-update-scanner:
    dir: "_proto/pb/scanner"
    cmds:
      - cmd: buf mod update

  pb-update-registry:
    dir: "_proto/pb/registry"
    cmds:
      - cmd: buf mod update

  pb-gen-scanner:
    dir: "_proto/pb/scanner"
    cmds:
      - cmd: buf generate

  pb-gen-registry:
    dir: "_proto/pb/registry"
    cmds:
      - cmd: buf generate

  pb-lint-scanner:
    dir: "_proto/pb/scanner"
    cmds:
      - cmd: buf lint

  pb-lint-registry:
    dir: "_proto/pb/registry"
    cmds:
      - cmd: buf lint

  tls:
    cmds:
      - task: tls-generate
      - task: tls-copy-scanner-{{OS}}
      - task: tls-copy-registry-{{OS}}
      - task: tls-copy-cli-{{OS}}

  tls-generate:
    dir: "_scripts/tls"
    cmds:
      - echo "Generating SSL certificates..."
      - cmd: Powershell.exe New-Item -Path ./generated -ItemType Directory -ErrorAction SilentlyContinue
        ignore_error: true
      - openssl genrsa -out ./generated/ca.key 4096
      - openssl req -new -x509 -key ./generated/ca.key -sha256 -subj "/C=SE/ST=HL/O=Example, INC." -days 365 -out ./generated/ca.cert
      - openssl genrsa -out ./generated/server.key 4096
      - openssl req -new -key ./generated/server.key -out ./generated/server.csr -config ./certificate.conf
      - openssl x509 -req -in ./generated/server.csr -CA ./generated/ca.cert -CAkey ./generated/ca.key -CAcreateserial -out ./generated/server.crt -days 365 -sha256 -extfile ./certificate.conf -extensions req_ext
      - echo "SSL certificate generated."

  tls-copy-cert-windows:
    cmds:
      - Powershell.exe Copy-Item {{ .SOURCE_PATH }}/server.crt -Destination {{ .COPY_PATH }}/server.crt


  tls-copy-key-windows:
    cmds:
      - Powershell.exe Copy-Item {{ .SOURCE_PATH }}/server.key -Destination {{ .COPY_PATH }}/server.key

  tls-copy-scanner-windows:
    vars:
      SOURCE_PATH: '_scripts/tls/generated'
      COPY_PATH: 'scanner/_gen/tls'
    cmds:
      - task: mkdir-windows
        vars: { DIR_PATH: '{{ .COPY_PATH }}' }
      - task: tls-copy-cert-windows
        vars: { SOURCE_PATH: '{{ .SOURCE_PATH }}', COPY_PATH: '{{ .COPY_PATH }}' }
      - task: tls-copy-key-windows
        vars: { SOURCE_PATH: '{{ .SOURCE_PATH }}', COPY_PATH: '{{ .COPY_PATH }}' }

  tls-copy-registry-windows:
    vars:
      SOURCE_PATH: '_scripts/tls/generated'
      COPY_PATH: 'registry/_gen/tls'
    cmds:
      - task: mkdir-windows
        vars: { DIR_PATH: '{{ .COPY_PATH }}' }
      - task: tls-copy-cert-windows
        vars: { SOURCE_PATH: '{{ .SOURCE_PATH }}', COPY_PATH: '{{ .COPY_PATH }}' }
      - task: tls-copy-key-windows
        vars: { SOURCE_PATH: '{{ .SOURCE_PATH }}', COPY_PATH: '{{ .COPY_PATH }}' }

  tls-copy-cli-windows:
    vars:
      SOURCE_PATH: '_scripts/tls/generated'
      COPY_PATH: 'cli/_gen/tls'
    cmds:
      - task: mkdir-windows
        vars: { DIR_PATH: '{{ .COPY_PATH }}' }
      - task: tls-copy-cert-windows
        vars: { SOURCE_PATH: '{{ .SOURCE_PATH }}', COPY_PATH: '{{ .COPY_PATH }}' }

  mkdir-windows:
    cmds:
      - cmd: Powershell.exe New-Item -Path {{ .DIR_PATH }} -ItemType Directory -ErrorAction SilentlyContinue
        ignore_error: true

  rmdir-windows:
    cmds:
      - cmd: Powershell.exe Remove-Item {{ .DIR_PATH }} -Recurse -Force -ErrorAction SilentlyContinue
        ignore_error: true

  pg:up:
    dir: "_dev/postgres"
    cmds:
      - cmd: docker-compose up -d

  pg:down: ## task pb-down -- -v
    dir: "_dev/postgres"
    cmds:
      - cmd: docker-compose down {{.CLI_ARGS}}

  redis:up:
    dir: "_dev/redis"
    cmds:
      - cmd: docker-compose up -d

  redis:down: ## task pb-down -- -v
    dir: "_dev/redis"
    cmds:
      - cmd: docker-compose down {{.CLI_ARGS}}

  test:scanner:
    dir: "scanner"
    cmds:
      - cmd: go test ./... -coverprofile=coverage.out

  migrate:scanner:up:
    dir: "scanner"
    vars:
        DATABASE_URL: "postgres://postgres:postgres@localhost:5432/scanner?sslmode=disable"
    cmds:
      - cmd: migrate -path ./db/migrations -database {{ .DATABASE_URL }} up
