// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: v1/scanner.proto

package scannerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScannerServiceClient is the client API for ScannerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScannerServiceClient interface {
	AddScanImage(ctx context.Context, in *AddScanImageRequest, opts ...grpc.CallOption) (*AddScanImageResponse, error)
	AddScanSbom(ctx context.Context, in *AddScanSbomRequest, opts ...grpc.CallOption) (*AddScanSbomResponse, error)
	GetScan(ctx context.Context, in *GetScanRequest, opts ...grpc.CallOption) (*GetScanResponse, error)
	GetScans(ctx context.Context, in *GetScansRequest, opts ...grpc.CallOption) (*GetScansResponse, error)
}

type scannerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScannerServiceClient(cc grpc.ClientConnInterface) ScannerServiceClient {
	return &scannerServiceClient{cc}
}

func (c *scannerServiceClient) AddScanImage(ctx context.Context, in *AddScanImageRequest, opts ...grpc.CallOption) (*AddScanImageResponse, error) {
	out := new(AddScanImageResponse)
	err := c.cc.Invoke(ctx, "/scanner.v1.ScannerService/AddScanImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scannerServiceClient) AddScanSbom(ctx context.Context, in *AddScanSbomRequest, opts ...grpc.CallOption) (*AddScanSbomResponse, error) {
	out := new(AddScanSbomResponse)
	err := c.cc.Invoke(ctx, "/scanner.v1.ScannerService/AddScanSbom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scannerServiceClient) GetScan(ctx context.Context, in *GetScanRequest, opts ...grpc.CallOption) (*GetScanResponse, error) {
	out := new(GetScanResponse)
	err := c.cc.Invoke(ctx, "/scanner.v1.ScannerService/GetScan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scannerServiceClient) GetScans(ctx context.Context, in *GetScansRequest, opts ...grpc.CallOption) (*GetScansResponse, error) {
	out := new(GetScansResponse)
	err := c.cc.Invoke(ctx, "/scanner.v1.ScannerService/GetScans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScannerServiceServer is the server API for ScannerService service.
// All implementations should embed UnimplementedScannerServiceServer
// for forward compatibility
type ScannerServiceServer interface {
	AddScanImage(context.Context, *AddScanImageRequest) (*AddScanImageResponse, error)
	AddScanSbom(context.Context, *AddScanSbomRequest) (*AddScanSbomResponse, error)
	GetScan(context.Context, *GetScanRequest) (*GetScanResponse, error)
	GetScans(context.Context, *GetScansRequest) (*GetScansResponse, error)
}

// UnimplementedScannerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedScannerServiceServer struct {
}

func (UnimplementedScannerServiceServer) AddScanImage(context.Context, *AddScanImageRequest) (*AddScanImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddScanImage not implemented")
}
func (UnimplementedScannerServiceServer) AddScanSbom(context.Context, *AddScanSbomRequest) (*AddScanSbomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddScanSbom not implemented")
}
func (UnimplementedScannerServiceServer) GetScan(context.Context, *GetScanRequest) (*GetScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScan not implemented")
}
func (UnimplementedScannerServiceServer) GetScans(context.Context, *GetScansRequest) (*GetScansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScans not implemented")
}

// UnsafeScannerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScannerServiceServer will
// result in compilation errors.
type UnsafeScannerServiceServer interface {
	mustEmbedUnimplementedScannerServiceServer()
}

func RegisterScannerServiceServer(s grpc.ServiceRegistrar, srv ScannerServiceServer) {
	s.RegisterService(&ScannerService_ServiceDesc, srv)
}

func _ScannerService_AddScanImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddScanImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerServiceServer).AddScanImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scanner.v1.ScannerService/AddScanImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerServiceServer).AddScanImage(ctx, req.(*AddScanImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScannerService_AddScanSbom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddScanSbomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerServiceServer).AddScanSbom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scanner.v1.ScannerService/AddScanSbom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerServiceServer).AddScanSbom(ctx, req.(*AddScanSbomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScannerService_GetScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerServiceServer).GetScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scanner.v1.ScannerService/GetScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerServiceServer).GetScan(ctx, req.(*GetScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScannerService_GetScans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerServiceServer).GetScans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scanner.v1.ScannerService/GetScans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerServiceServer).GetScans(ctx, req.(*GetScansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScannerService_ServiceDesc is the grpc.ServiceDesc for ScannerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScannerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scanner.v1.ScannerService",
	HandlerType: (*ScannerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddScanImage",
			Handler:    _ScannerService_AddScanImage_Handler,
		},
		{
			MethodName: "AddScanSbom",
			Handler:    _ScannerService_AddScanSbom_Handler,
		},
		{
			MethodName: "GetScan",
			Handler:    _ScannerService_GetScan_Handler,
		},
		{
			MethodName: "GetScans",
			Handler:    _ScannerService_GetScans_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/scanner.proto",
}
