// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: scan.sql

package store

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createScan = `-- name: CreateScan :one
INSERT INTO scan (id, uuid)
values ($1, $2)
RETURNING id, uuid, created_at, updated_at, image, status, sbom, report
`

type CreateScanParams struct {
	ID   sql.NullInt32 `json:"id"`
	Uuid uuid.UUID     `json:"uuid"`
}

func (q *Queries) CreateScan(ctx context.Context, arg CreateScanParams) (Scan, error) {
	row := q.queryRow(ctx, q.createScanStmt, createScan, arg.ID, arg.Uuid)
	var i Scan
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Image,
		&i.Status,
		&i.Sbom,
		&i.Report,
	)
	return i, err
}

const deleteScanById = `-- name: DeleteScanById :exec
DELETE
FROM scan
WHERE id = $1
`

func (q *Queries) DeleteScanById(ctx context.Context, id sql.NullInt32) error {
	_, err := q.exec(ctx, q.deleteScanByIdStmt, deleteScanById, id)
	return err
}

const deleteScanByUUID = `-- name: DeleteScanByUUID :exec
DELETE
FROM scan
WHERE uuid = $1
`

func (q *Queries) DeleteScanByUUID(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteScanByUUIDStmt, deleteScanByUUID, argUuid)
	return err
}

const getScanById = `-- name: GetScanById :one
SELECT id, uuid, created_at, updated_at, image, status, sbom, report
FROM scan
WHERE id = $1
`

func (q *Queries) GetScanById(ctx context.Context, id sql.NullInt32) (Scan, error) {
	row := q.queryRow(ctx, q.getScanByIdStmt, getScanById, id)
	var i Scan
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Image,
		&i.Status,
		&i.Sbom,
		&i.Report,
	)
	return i, err
}

const getScanByUUID = `-- name: GetScanByUUID :one
SELECT id, uuid, created_at, updated_at, image, status, sbom, report
FROM scan
WHERE uuid = $1
`

func (q *Queries) GetScanByUUID(ctx context.Context, argUuid uuid.UUID) (Scan, error) {
	row := q.queryRow(ctx, q.getScanByUUIDStmt, getScanByUUID, argUuid)
	var i Scan
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Image,
		&i.Status,
		&i.Sbom,
		&i.Report,
	)
	return i, err
}

const getScans = `-- name: GetScans :many
SELECT id, uuid, created_at, updated_at, image, status, sbom, report
FROM scan
ORDER BY created_at desc
LIMIT $1 OFFSET $2
`

type GetScansParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetScans(ctx context.Context, arg GetScansParams) ([]Scan, error) {
	rows, err := q.query(ctx, q.getScansStmt, getScans, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Scan
	for rows.Next() {
		var i Scan
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Image,
			&i.Status,
			&i.Sbom,
			&i.Report,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
