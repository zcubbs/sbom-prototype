// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: scan.sql

package store

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const countScans = `-- name: CountScans :one
SELECT count(*) FROM scan
`

func (q *Queries) CountScans(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countScansStmt, countScans)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createScan = `-- name: CreateScan :one
INSERT INTO scan (
                  uuid,
                  image,
                  sbom,
                  status,
                  artifact_id,
                  artifact_name,
                  artifact_version,
                  created_at,
                  updated_at
                  )
values ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, uuid, created_at, updated_at, image, status, sbom, report, artifact_id, artifact_name, artifact_version
`

type CreateScanParams struct {
	Uuid            uuid.UUID      `json:"uuid"`
	Image           string         `json:"image"`
	Sbom            sql.NullString `json:"sbom"`
	Status          string         `json:"status"`
	ArtifactID      uuid.NullUUID  `json:"artifact_id"`
	ArtifactName    sql.NullString `json:"artifact_name"`
	ArtifactVersion sql.NullString `json:"artifact_version"`
	CreatedAt       time.Time      `json:"created_at"`
	UpdatedAt       time.Time      `json:"updated_at"`
}

func (q *Queries) CreateScan(ctx context.Context, arg CreateScanParams) (Scan, error) {
	row := q.queryRow(ctx, q.createScanStmt, createScan,
		arg.Uuid,
		arg.Image,
		arg.Sbom,
		arg.Status,
		arg.ArtifactID,
		arg.ArtifactName,
		arg.ArtifactVersion,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Scan
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Image,
		&i.Status,
		&i.Sbom,
		&i.Report,
		&i.ArtifactID,
		&i.ArtifactName,
		&i.ArtifactVersion,
	)
	return i, err
}

const deleteScanById = `-- name: DeleteScanById :exec
DELETE
FROM scan
WHERE id = $1
`

func (q *Queries) DeleteScanById(ctx context.Context, id sql.NullInt32) error {
	_, err := q.exec(ctx, q.deleteScanByIdStmt, deleteScanById, id)
	return err
}

const deleteScanByUUID = `-- name: DeleteScanByUUID :exec
DELETE
FROM scan
WHERE uuid = $1
`

func (q *Queries) DeleteScanByUUID(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteScanByUUIDStmt, deleteScanByUUID, argUuid)
	return err
}

const getScanById = `-- name: GetScanById :one
SELECT id, uuid, created_at, updated_at, image, status, sbom, report, artifact_id, artifact_name, artifact_version
FROM scan
WHERE id = $1
`

func (q *Queries) GetScanById(ctx context.Context, id sql.NullInt32) (Scan, error) {
	row := q.queryRow(ctx, q.getScanByIdStmt, getScanById, id)
	var i Scan
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Image,
		&i.Status,
		&i.Sbom,
		&i.Report,
		&i.ArtifactID,
		&i.ArtifactName,
		&i.ArtifactVersion,
	)
	return i, err
}

const getScanByUUID = `-- name: GetScanByUUID :one
SELECT id, uuid, created_at, updated_at, image, status, sbom, report, artifact_id, artifact_name, artifact_version
FROM scan
WHERE uuid = $1
`

func (q *Queries) GetScanByUUID(ctx context.Context, argUuid uuid.UUID) (Scan, error) {
	row := q.queryRow(ctx, q.getScanByUUIDStmt, getScanByUUID, argUuid)
	var i Scan
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Image,
		&i.Status,
		&i.Sbom,
		&i.Report,
		&i.ArtifactID,
		&i.ArtifactName,
		&i.ArtifactVersion,
	)
	return i, err
}

const getScans = `-- name: GetScans :many
SELECT id, uuid, created_at, updated_at, image, status, sbom, report, artifact_id, artifact_name, artifact_version
FROM scan
ORDER BY created_at desc
LIMIT $1 OFFSET $2
`

type GetScansParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetScans(ctx context.Context, arg GetScansParams) ([]Scan, error) {
	rows, err := q.query(ctx, q.getScansStmt, getScans, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Scan
	for rows.Next() {
		var i Scan
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Image,
			&i.Status,
			&i.Sbom,
			&i.Report,
			&i.ArtifactID,
			&i.ArtifactName,
			&i.ArtifactVersion,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
