// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: artifact.sql

package db

import (
	"context"
)

const createArtifact = `-- name: CreateArtifact :one
INSERT INTO artifacts (
      artifact_type,
      artifact_name,
      artifact_version
) VALUES (
      $1, $2, $3
)
RETURNING id, artifact_type, artifact_name, artifact_version, created_at
`

type CreateArtifactParams struct {
	ArtifactType    string `json:"artifact_type"`
	ArtifactName    string `json:"artifact_name"`
	ArtifactVersion string `json:"artifact_version"`
}

func (q *Queries) CreateArtifact(ctx context.Context, arg CreateArtifactParams) (Artifact, error) {
	row := q.db.QueryRowContext(ctx, createArtifact, arg.ArtifactType, arg.ArtifactName, arg.ArtifactVersion)
	var i Artifact
	err := row.Scan(
		&i.ID,
		&i.ArtifactType,
		&i.ArtifactName,
		&i.ArtifactVersion,
		&i.CreatedAt,
	)
	return i, err
}

const deleteArtifact = `-- name: DeleteArtifact :exec
DELETE FROM artifacts
WHERE id = $1
`

func (q *Queries) DeleteArtifact(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteArtifact, id)
	return err
}

const getArtifact = `-- name: GetArtifact :one
SELECT id, artifact_type, artifact_name, artifact_version, created_at FROM artifacts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetArtifact(ctx context.Context, id int64) (Artifact, error) {
	row := q.db.QueryRowContext(ctx, getArtifact, id)
	var i Artifact
	err := row.Scan(
		&i.ID,
		&i.ArtifactType,
		&i.ArtifactName,
		&i.ArtifactVersion,
		&i.CreatedAt,
	)
	return i, err
}

const listArtifacts = `-- name: ListArtifacts :many
SELECT id, artifact_type, artifact_name, artifact_version, created_at FROM artifacts
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListArtifactsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListArtifacts(ctx context.Context, arg ListArtifactsParams) ([]Artifact, error) {
	rows, err := q.db.QueryContext(ctx, listArtifacts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Artifact
	for rows.Next() {
		var i Artifact
		if err := rows.Scan(
			&i.ID,
			&i.ArtifactType,
			&i.ArtifactName,
			&i.ArtifactVersion,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArtifact = `-- name: UpdateArtifact :one
UPDATE artifacts
SET   artifact_type = $1,
      artifact_name = $2,
      artifact_version = $3
WHERE id = $4
RETURNING id, artifact_type, artifact_name, artifact_version, created_at
`

type UpdateArtifactParams struct {
	ArtifactType    string `json:"artifact_type"`
	ArtifactName    string `json:"artifact_name"`
	ArtifactVersion string `json:"artifact_version"`
	ID              int64  `json:"id"`
}

func (q *Queries) UpdateArtifact(ctx context.Context, arg UpdateArtifactParams) (Artifact, error) {
	row := q.db.QueryRowContext(ctx, updateArtifact,
		arg.ArtifactType,
		arg.ArtifactName,
		arg.ArtifactVersion,
		arg.ID,
	)
	var i Artifact
	err := row.Scan(
		&i.ID,
		&i.ArtifactType,
		&i.ArtifactName,
		&i.ArtifactVersion,
		&i.CreatedAt,
	)
	return i, err
}
