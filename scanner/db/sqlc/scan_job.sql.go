// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: scan_job.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/tabbed/pqtype"
)

const countScanJobs = `-- name: CountScanJobs :one
SELECT count(*) AS count
`

func (q *Queries) CountScanJobs(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countScanJobs)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteScanJob = `-- name: DeleteScanJob :exec
DELETE
FROM scan_jobs
WHERE id = $1
`

func (q *Queries) DeleteScanJob(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteScanJob, id)
	return err
}

const getScanJobByID = `-- name: GetScanJobByID :one
SELECT id, created_at, updated_at, sbom_uuid, artifact_uuid, artifact_name, artifact_version, artifact_type, status, report, job_log
FROM scan_jobs
WHERE id = $1
`

func (q *Queries) GetScanJobByID(ctx context.Context, id int64) (ScanJob, error) {
	row := q.db.QueryRowContext(ctx, getScanJobByID, id)
	var i ScanJob
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SbomUuid,
		&i.ArtifactUuid,
		&i.ArtifactName,
		&i.ArtifactVersion,
		&i.ArtifactType,
		&i.Status,
		&i.Report,
		&i.JobLog,
	)
	return i, err
}

const getScanJobsList = `-- name: GetScanJobsList :many
SELECT id, created_at, updated_at, sbom_uuid, artifact_uuid, artifact_name, artifact_version, artifact_type, status, report, job_log
FROM scan_jobs
ORDER BY id
LIMIT $1 OFFSET $2
`

type GetScanJobsListParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetScanJobsList(ctx context.Context, arg GetScanJobsListParams) ([]ScanJob, error) {
	rows, err := q.db.QueryContext(ctx, getScanJobsList, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ScanJob{}
	for rows.Next() {
		var i ScanJob
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SbomUuid,
			&i.ArtifactUuid,
			&i.ArtifactName,
			&i.ArtifactVersion,
			&i.ArtifactType,
			&i.Status,
			&i.Report,
			&i.JobLog,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertScanJob = `-- name: InsertScanJob :one
INSERT INTO scan_jobs (artifact_uuid,
                       artifact_name,
                       artifact_version,
                       artifact_type,
                       status,
                       report,
                       job_log)
VALUES ($1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7)
RETURNING id, created_at, updated_at, sbom_uuid, artifact_uuid, artifact_name, artifact_version, artifact_type, status, report, job_log
`

type InsertScanJobParams struct {
	ArtifactUuid    uuid.NullUUID         `json:"artifact_uuid"`
	ArtifactName    string                `json:"artifact_name"`
	ArtifactVersion string                `json:"artifact_version"`
	ArtifactType    string                `json:"artifact_type"`
	Status          string                `json:"status"`
	Report          pqtype.NullRawMessage `json:"report"`
	JobLog          sql.NullString        `json:"job_log"`
}

func (q *Queries) InsertScanJob(ctx context.Context, arg InsertScanJobParams) (ScanJob, error) {
	row := q.db.QueryRowContext(ctx, insertScanJob,
		arg.ArtifactUuid,
		arg.ArtifactName,
		arg.ArtifactVersion,
		arg.ArtifactType,
		arg.Status,
		arg.Report,
		arg.JobLog,
	)
	var i ScanJob
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SbomUuid,
		&i.ArtifactUuid,
		&i.ArtifactName,
		&i.ArtifactVersion,
		&i.ArtifactType,
		&i.Status,
		&i.Report,
		&i.JobLog,
	)
	return i, err
}

const updateScanJob = `-- name: UpdateScanJob :one
UPDATE scan_jobs
SET artifact_uuid    = $1,
    artifact_name    = $2,
    artifact_version = $3,
    artifact_type    = $4,
    status           = $5,
    report           = $6,
    job_log          = $7,
    updated_at       = current_timestamp
WHERE id = $8
RETURNING id, created_at, updated_at, sbom_uuid, artifact_uuid, artifact_name, artifact_version, artifact_type, status, report, job_log
`

type UpdateScanJobParams struct {
	ArtifactUuid    uuid.NullUUID         `json:"artifact_uuid"`
	ArtifactName    string                `json:"artifact_name"`
	ArtifactVersion string                `json:"artifact_version"`
	ArtifactType    string                `json:"artifact_type"`
	Status          string                `json:"status"`
	Report          pqtype.NullRawMessage `json:"report"`
	JobLog          sql.NullString        `json:"job_log"`
	ID              int64                 `json:"id"`
}

func (q *Queries) UpdateScanJob(ctx context.Context, arg UpdateScanJobParams) (ScanJob, error) {
	row := q.db.QueryRowContext(ctx, updateScanJob,
		arg.ArtifactUuid,
		arg.ArtifactName,
		arg.ArtifactVersion,
		arg.ArtifactType,
		arg.Status,
		arg.Report,
		arg.JobLog,
		arg.ID,
	)
	var i ScanJob
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SbomUuid,
		&i.ArtifactUuid,
		&i.ArtifactName,
		&i.ArtifactVersion,
		&i.ArtifactType,
		&i.Status,
		&i.Report,
		&i.JobLog,
	)
	return i, err
}
