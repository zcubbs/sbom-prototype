// Code generated by MockGen. DO NOT EDIT.
// Source: zel/sbom-prototype/scanner/db/sqlc (interfaces: Store)

// Package mock_sqlc is a generated GoMock package.
package mock_sqlc

import (
	context "context"
	reflect "reflect"
	db "zel/sbom-prototype/scanner/db/sqlc"

	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CountScanJobs mocks base method.
func (m *MockStore) CountScanJobs(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountScanJobs", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountScanJobs indicates an expected call of CountScanJobs.
func (mr *MockStoreMockRecorder) CountScanJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountScanJobs", reflect.TypeOf((*MockStore)(nil).CountScanJobs), arg0)
}

// CreateScanJobTx mocks base method.
func (m *MockStore) CreateScanJobTx(arg0 context.Context, arg1 db.CreateScanJobParamsTx) (db.CreateScanJobParamsTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScanJobTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateScanJobParamsTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScanJobTx indicates an expected call of CreateScanJobTx.
func (mr *MockStoreMockRecorder) CreateScanJobTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScanJobTx", reflect.TypeOf((*MockStore)(nil).CreateScanJobTx), arg0, arg1)
}

// DeleteScanJob mocks base method.
func (m *MockStore) DeleteScanJob(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteScanJob", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteScanJob indicates an expected call of DeleteScanJob.
func (mr *MockStoreMockRecorder) DeleteScanJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteScanJob", reflect.TypeOf((*MockStore)(nil).DeleteScanJob), arg0, arg1)
}

// GetScanJobByID mocks base method.
func (m *MockStore) GetScanJobByID(arg0 context.Context, arg1 int64) (db.ScanJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScanJobByID", arg0, arg1)
	ret0, _ := ret[0].(db.ScanJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScanJobByID indicates an expected call of GetScanJobByID.
func (mr *MockStoreMockRecorder) GetScanJobByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScanJobByID", reflect.TypeOf((*MockStore)(nil).GetScanJobByID), arg0, arg1)
}

// GetScanJobsList mocks base method.
func (m *MockStore) GetScanJobsList(arg0 context.Context, arg1 db.GetScanJobsListParams) ([]db.ScanJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScanJobsList", arg0, arg1)
	ret0, _ := ret[0].([]db.ScanJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScanJobsList indicates an expected call of GetScanJobsList.
func (mr *MockStoreMockRecorder) GetScanJobsList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScanJobsList", reflect.TypeOf((*MockStore)(nil).GetScanJobsList), arg0, arg1)
}

// InsertScanJob mocks base method.
func (m *MockStore) InsertScanJob(arg0 context.Context, arg1 db.InsertScanJobParams) (db.ScanJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertScanJob", arg0, arg1)
	ret0, _ := ret[0].(db.ScanJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertScanJob indicates an expected call of InsertScanJob.
func (mr *MockStoreMockRecorder) InsertScanJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertScanJob", reflect.TypeOf((*MockStore)(nil).InsertScanJob), arg0, arg1)
}

// UpdateScanJob mocks base method.
func (m *MockStore) UpdateScanJob(arg0 context.Context, arg1 db.UpdateScanJobParams) (db.ScanJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScanJob", arg0, arg1)
	ret0, _ := ret[0].(db.ScanJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateScanJob indicates an expected call of UpdateScanJob.
func (mr *MockStoreMockRecorder) UpdateScanJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScanJob", reflect.TypeOf((*MockStore)(nil).UpdateScanJob), arg0, arg1)
}
